#!/usr/bin/env perl

use strict;
use warnings;
use DBI;
use Getopt::Long qw(:config autohelp);
use IRC::Utils qw(lc_irc strip_color strip_formatting decode_irc);
use Pod::Usage;
use Text::Karma;

GetOptions(
    'f|format=s'       => \(my $format = ''),
    'b|bot=s'          => \my $bot,
    'r|ignore-regex=s' => \my @ignore_regexes,
    'n|ignore-nick=s'  => \my @ignore_nicks,
    'd|database=s'     => \my $database,
    'c|channel=s'      => \my $channel,
    'p|table-prefix=s' => \my $table_prefix,
    's|self-karma'     => \my $self_karma,
) or pod2usage();

die "No database file specified\n" if !defined $database;
die "No channel name specified\n" if !defined $channel;

my $dbh;
$dbh = DBI->connect(
    "dbi:SQLite:dbname=$database",'','',
    {
        AutoCommit => 0,
        RaiseError => 1,
    },
) or die "Can't open database: ".$dbh->errstr."\n";

my $karma = Text::Karma->new(
    dbh => $dbh,
    (defined $table_prefix ? (table_prefix => $table_prefix) : ()),
);

my ($privmsg, $action);
if ($format eq 'pocoirc') {
    $privmsg = qr/^(?:\S+ )?\S+ <(\S+)> (.*)/;
    $action = qr/^(?:\S+ )?\S+ \* (\S+) (.*)/;
}
elsif ($format eq 'irssi') {
    $privmsg = qr/^\S+\s+<.(\S+)> (.*)/;
    $action = qr/^\S+\s+\* (\S+) (.*)/;
}
else {
    die "No log format specified with --format\n";
}

binmode STDIN, ':bytes';
binmode STDOUT, ':utf8';

LINE: while (my $line = <STDIN>) {
    chomp $line;

    # decode cp1252/utf8 bytes to a text string
    $line = decode_irc($line);

    $line = strip_color($line);
    $line = strip_formatting($line);

    my ($nick, $msg);
    if (($nick, $msg) = $line =~ /$privmsg/) {
        # PRIVMSG
        $msg =~ s/^\s*\Q$bot\E[:,;.!?~]?\s//i if defined $bot;
    }
    elsif (($nick, $msg) = $line =~ /$action/) {
        # ACTION
    }
    else {
        next LINE;
    }

    # skip it if we want to ignore this nick
    for my $bad (@ignore_nicks) {
        next LINE if lc_irc($nick) eq lc_irc($bad);
    }

    # skip if it matches a regex
    for my $regex (@ignore_regexes) {
        next LINE if $msg =~ /$regex/;
    }

    $karma->process_karma(
        nick  => $nick,
        who   => $nick,
        where => $channel,
        str   => $msg,
        self_karma => $self_karma,
    );
}

$dbh->commit();

=head1 NAME

karma-seed - Populates a L<Text::Karma|Text::Karma> database from IRC logs.

=head1 SYNOPSIS

B<karma-seed> <options>

 Options:
   -f FORMAT, --format=NAME         Log format (pocoirc or irssi)
   -c CASE,   --case=CASE           The IRC server's case mapping
   -b NICK,   --bot=NICK            The nickname of the IRC bot
   -r RX      --ignore-regex=RX     A regex for lines to ignore
   -n NICK,   --ignore-nick=NICK    A nickname to ignore
   -c CHAN,   --channel=CHAN        The name of the channel
   -d DB,     --database=DB         The database filename
   -p FOO,    --table-prefix=FOO    A prefix for the database table
   -s,        --self-karma          Whether to allow self karma (default: 0)
   -h,        --help                Print this help message
   -v,        --version             Print version number

Input is accepted on STDIN, and output is delivered to STDOUT.

You should use the C<--bot> option if your bot was present when the channel
was logged as it will strip the I<"botname: "> part from messages where
users addressed the bot.

If your bot (or any other bot in the channel) can take commands that all
start in a similar way, use the C<--ignore-regex> option to ignore those
lines, e.g. C<--ignore-regex='^!\w+'> for bots that react to commands
prefixed with '!'.

Example:

  # convert irssi log, ignoring "MyBot: " prefix and lines with URLs
  cat ~/logs/\#chan.log | irchailo-seed -f irssi -b MyBot -r '\w+://\w' > hailo.trn

The C<--case> option controls the second parameter passed to C<lc_irc>
from L<IRC::Utils|IRC::Utils>. The default is B<'rfc1459'>. You usually
don't have to change this. Consult that package's documentation for more
information.

=head1 AUTHOR

Hinrik E<Ouml>rn SigurE<eth>sson, hinrik.sig@gmail.com

=head1 LICENSE AND COPYRIGHT

Copyright 2011 Hinrik E<Ouml>rn SigurE<eth>sson

This program is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
